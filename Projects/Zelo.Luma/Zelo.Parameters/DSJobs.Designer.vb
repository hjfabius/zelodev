'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DSJobs"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSJobs
    Inherits System.Data.DataSet
    
    Private tableJobs As JobsDataTable
    
    Private tableRegisters As RegistersDataTable
    
    Private tableGroups As GroupsDataTable
    
    Private tableViscosities As ViscositiesDataTable
    
    Private tableDensities As DensitiesDataTable
    
    Private tableZeloSystem As ZeloSystemDataTable
    
    Private tableInput_Outputs As Input_OutputsDataTable
    
    Private relationRegister_Groups As System.Data.DataRelation
    
    Private relationFK_Groups_Densities As System.Data.DataRelation
    
    Private relationJobs_Groups As System.Data.DataRelation
    
    Private relationViscosityControl_Groups As System.Data.DataRelation
    
    Private relationFK_Input_Outputs_System As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Jobs")) Is Nothing) Then
                MyBase.Tables.Add(New JobsDataTable(ds.Tables("Jobs")))
            End If
            If (Not (ds.Tables("Registers")) Is Nothing) Then
                MyBase.Tables.Add(New RegistersDataTable(ds.Tables("Registers")))
            End If
            If (Not (ds.Tables("Groups")) Is Nothing) Then
                MyBase.Tables.Add(New GroupsDataTable(ds.Tables("Groups")))
            End If
            If (Not (ds.Tables("Viscosities")) Is Nothing) Then
                MyBase.Tables.Add(New ViscositiesDataTable(ds.Tables("Viscosities")))
            End If
            If (Not (ds.Tables("Densities")) Is Nothing) Then
                MyBase.Tables.Add(New DensitiesDataTable(ds.Tables("Densities")))
            End If
            If (Not (ds.Tables("ZeloSystem")) Is Nothing) Then
                MyBase.Tables.Add(New ZeloSystemDataTable(ds.Tables("ZeloSystem")))
            End If
            If (Not (ds.Tables("Input_Outputs")) Is Nothing) Then
                MyBase.Tables.Add(New Input_OutputsDataTable(ds.Tables("Input_Outputs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Jobs() As JobsDataTable
        Get
            Return Me.tableJobs
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Registers() As RegistersDataTable
        Get
            Return Me.tableRegisters
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Groups() As GroupsDataTable
        Get
            Return Me.tableGroups
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Viscosities() As ViscositiesDataTable
        Get
            Return Me.tableViscosities
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Densities() As DensitiesDataTable
        Get
            Return Me.tableDensities
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZeloSystem() As ZeloSystemDataTable
        Get
            Return Me.tableZeloSystem
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Input_Outputs() As Input_OutputsDataTable
        Get
            Return Me.tableInput_Outputs
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DSJobs = CType(MyBase.Clone,DSJobs)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Jobs")) Is Nothing) Then
                MyBase.Tables.Add(New JobsDataTable(ds.Tables("Jobs")))
            End If
            If (Not (ds.Tables("Registers")) Is Nothing) Then
                MyBase.Tables.Add(New RegistersDataTable(ds.Tables("Registers")))
            End If
            If (Not (ds.Tables("Groups")) Is Nothing) Then
                MyBase.Tables.Add(New GroupsDataTable(ds.Tables("Groups")))
            End If
            If (Not (ds.Tables("Viscosities")) Is Nothing) Then
                MyBase.Tables.Add(New ViscositiesDataTable(ds.Tables("Viscosities")))
            End If
            If (Not (ds.Tables("Densities")) Is Nothing) Then
                MyBase.Tables.Add(New DensitiesDataTable(ds.Tables("Densities")))
            End If
            If (Not (ds.Tables("ZeloSystem")) Is Nothing) Then
                MyBase.Tables.Add(New ZeloSystemDataTable(ds.Tables("ZeloSystem")))
            End If
            If (Not (ds.Tables("Input_Outputs")) Is Nothing) Then
                MyBase.Tables.Add(New Input_OutputsDataTable(ds.Tables("Input_Outputs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableJobs = CType(MyBase.Tables("Jobs"),JobsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableJobs) Is Nothing) Then
                Me.tableJobs.InitVars
            End If
        End If
        Me.tableRegisters = CType(MyBase.Tables("Registers"),RegistersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegisters) Is Nothing) Then
                Me.tableRegisters.InitVars
            End If
        End If
        Me.tableGroups = CType(MyBase.Tables("Groups"),GroupsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGroups) Is Nothing) Then
                Me.tableGroups.InitVars
            End If
        End If
        Me.tableViscosities = CType(MyBase.Tables("Viscosities"),ViscositiesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableViscosities) Is Nothing) Then
                Me.tableViscosities.InitVars
            End If
        End If
        Me.tableDensities = CType(MyBase.Tables("Densities"),DensitiesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDensities) Is Nothing) Then
                Me.tableDensities.InitVars
            End If
        End If
        Me.tableZeloSystem = CType(MyBase.Tables("ZeloSystem"),ZeloSystemDataTable)
        If (initTable = true) Then
            If (Not (Me.tableZeloSystem) Is Nothing) Then
                Me.tableZeloSystem.InitVars
            End If
        End If
        Me.tableInput_Outputs = CType(MyBase.Tables("Input_Outputs"),Input_OutputsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableInput_Outputs) Is Nothing) Then
                Me.tableInput_Outputs.InitVars
            End If
        End If
        Me.relationRegister_Groups = Me.Relations("Register_Groups")
        Me.relationFK_Groups_Densities = Me.Relations("FK_Groups_Densities")
        Me.relationJobs_Groups = Me.Relations("Jobs_Groups")
        Me.relationViscosityControl_Groups = Me.Relations("ViscosityControl_Groups")
        Me.relationFK_Input_Outputs_System = Me.Relations("FK_Input_Outputs_System")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSJobs"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSJobs.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableJobs = New JobsDataTable
        MyBase.Tables.Add(Me.tableJobs)
        Me.tableRegisters = New RegistersDataTable
        MyBase.Tables.Add(Me.tableRegisters)
        Me.tableGroups = New GroupsDataTable
        MyBase.Tables.Add(Me.tableGroups)
        Me.tableViscosities = New ViscositiesDataTable
        MyBase.Tables.Add(Me.tableViscosities)
        Me.tableDensities = New DensitiesDataTable
        MyBase.Tables.Add(Me.tableDensities)
        Me.tableZeloSystem = New ZeloSystemDataTable
        MyBase.Tables.Add(Me.tableZeloSystem)
        Me.tableInput_Outputs = New Input_OutputsDataTable
        MyBase.Tables.Add(Me.tableInput_Outputs)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("Register_Groups", New System.Data.DataColumn() {Me.tableRegisters.RegisterIDColumn}, New System.Data.DataColumn() {Me.tableGroups.RegisterIDColumn})
        Me.tableGroups.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.None
        fkc.UpdateRule = System.Data.Rule.None
        Me.relationRegister_Groups = New System.Data.DataRelation("Register_Groups", New System.Data.DataColumn() {Me.tableRegisters.RegisterIDColumn}, New System.Data.DataColumn() {Me.tableGroups.RegisterIDColumn}, false)
        Me.Relations.Add(Me.relationRegister_Groups)
        Me.relationFK_Groups_Densities = New System.Data.DataRelation("FK_Groups_Densities", New System.Data.DataColumn() {Me.tableGroups.GroupIDColumn}, New System.Data.DataColumn() {Me.tableDensities.GroupIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Groups_Densities)
        Me.relationJobs_Groups = New System.Data.DataRelation("Jobs_Groups", New System.Data.DataColumn() {Me.tableJobs.JobIDColumn}, New System.Data.DataColumn() {Me.tableGroups.JobIDColumn}, false)
        Me.Relations.Add(Me.relationJobs_Groups)
        Me.relationViscosityControl_Groups = New System.Data.DataRelation("ViscosityControl_Groups", New System.Data.DataColumn() {Me.tableViscosities.ViscosityIDColumn}, New System.Data.DataColumn() {Me.tableGroups.ViscosityIDColumn}, false)
        Me.Relations.Add(Me.relationViscosityControl_Groups)
        Me.relationFK_Input_Outputs_System = New System.Data.DataRelation("FK_Input_Outputs_System", New System.Data.DataColumn() {Me.tableInput_Outputs.IO_IDColumn}, New System.Data.DataColumn() {Me.tableZeloSystem.IO_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Input_Outputs_System)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeJobs() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRegisters() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGroups() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeViscosities() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDensities() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeZeloSystem() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeInput_Outputs() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSJobs = New DSJobs
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub JobsRowChangeEventHandler(ByVal sender As Object, ByVal e As JobsRowChangeEvent)
    
    Public Delegate Sub RegistersRowChangeEventHandler(ByVal sender As Object, ByVal e As RegistersRowChangeEvent)
    
    Public Delegate Sub GroupsRowChangeEventHandler(ByVal sender As Object, ByVal e As GroupsRowChangeEvent)
    
    Public Delegate Sub ViscositiesRowChangeEventHandler(ByVal sender As Object, ByVal e As ViscositiesRowChangeEvent)
    
    Public Delegate Sub DensitiesRowChangeEventHandler(ByVal sender As Object, ByVal e As DensitiesRowChangeEvent)
    
    Public Delegate Sub ZeloSystemRowChangeEventHandler(ByVal sender As Object, ByVal e As ZeloSystemRowChangeEvent)
    
    Public Delegate Sub Input_OutputsRowChangeEventHandler(ByVal sender As Object, ByVal e As Input_OutputsRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class JobsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnJobID As System.Data.DataColumn
        
        Private columnClientName As System.Data.DataColumn
        
        Private columnProjectName As System.Data.DataColumn
        
        Private columnDateCreated As System.Data.DataColumn
        
        Private columnDateModified As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Jobs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnJobID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnProjectName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateModifiedColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateModified
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As JobsRow
            Get
                Return CType(Me.Rows(index),JobsRow)
            End Get
        End Property
        
        Public Event JobsRowChanging As JobsRowChangeEventHandler
        
        Public Event JobsRowChanged As JobsRowChangeEventHandler
        
        Public Event JobsRowDeleting As JobsRowChangeEventHandler
        
        Public Event JobsRowDeleted As JobsRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddJobsRow(ByVal row As JobsRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddJobsRow(ByVal ClientName As String, ByVal ProjectName As String, ByVal DateCreated As Date, ByVal DateModified As Date) As JobsRow
            Dim rowJobsRow As JobsRow = CType(Me.NewRow,JobsRow)
            rowJobsRow.ItemArray = New Object() {Nothing, ClientName, ProjectName, DateCreated, DateModified}
            Me.Rows.Add(rowJobsRow)
            Return rowJobsRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByJobID(ByVal JobID As Integer) As JobsRow
            Return CType(Me.Rows.Find(New Object() {JobID}),JobsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As JobsDataTable = CType(MyBase.Clone,JobsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New JobsDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnJobID = MyBase.Columns("JobID")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnProjectName = MyBase.Columns("ProjectName")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
            Me.columnDateModified = MyBase.Columns("DateModified")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnJobID = New System.Data.DataColumn("JobID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobID)
            Me.columnClientName = New System.Data.DataColumn("ClientName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnProjectName = New System.Data.DataColumn("ProjectName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectName)
            Me.columnDateCreated = New System.Data.DataColumn("DateCreated", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.columnDateModified = New System.Data.DataColumn("DateModified", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateModified)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnJobID}, true))
            Me.columnJobID.AutoIncrement = true
            Me.columnJobID.AllowDBNull = false
            Me.columnJobID.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewJobsRow() As JobsRow
            Return CType(Me.NewRow,JobsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New JobsRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(JobsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.JobsRowChangedEvent) Is Nothing) Then
                RaiseEvent JobsRowChanged(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.JobsRowChangingEvent) Is Nothing) Then
                RaiseEvent JobsRowChanging(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.JobsRowDeletedEvent) Is Nothing) Then
                RaiseEvent JobsRowDeleted(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.JobsRowDeletingEvent) Is Nothing) Then
                RaiseEvent JobsRowDeleting(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveJobsRow(ByVal row As JobsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSJobs = New DSJobs
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "JobsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegistersDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRegisterID As System.Data.DataColumn
        
        Private columnRange As System.Data.DataColumn
        
        Private columnLongitudinalMode As System.Data.DataColumn
        
        Private columnLateralMode As System.Data.DataColumn
        
        Private columnIsBaseColor As System.Data.DataColumn
        
        Private columnIsInstalled As System.Data.DataColumn
        
        Private columnLateralRefValue As System.Data.DataColumn
        
        Private columnLateralValue As System.Data.DataColumn
        
        Private columnLongitudinalRefValue As System.Data.DataColumn
        
        Private columnLongitudinalValue As System.Data.DataColumn
        
        Private columnMarkID As System.Data.DataColumn
        
        Private columnLateralFactor As System.Data.DataColumn
        
        Private columnLateralGain As System.Data.DataColumn
        
        Private columnLongitudinalFactor As System.Data.DataColumn
        
        Private columnLongitudinalGain As System.Data.DataColumn
        
        Private columnSide As System.Data.DataColumn
        
        Private columnCylinderLength As System.Data.DataColumn
        
        Private columnCyclic As System.Data.DataColumn
        
        Private columnLongitudinalLength As System.Data.DataColumn
        
        Private columnEncoderPosition As System.Data.DataColumn
        
        Private columnOutputID As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Registers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegisterIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnRegisterID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RangeColumn() As System.Data.DataColumn
            Get
                Return Me.columnRange
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudinalModeColumn() As System.Data.DataColumn
            Get
                Return Me.columnLongitudinalMode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LateralModeColumn() As System.Data.DataColumn
            Get
                Return Me.columnLateralMode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsBaseColorColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsBaseColor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsInstalledColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsInstalled
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LateralRefValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnLateralRefValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LateralValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnLateralValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudinalRefValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnLongitudinalRefValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudinalValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnLongitudinalValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnMarkID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LateralFactorColumn() As System.Data.DataColumn
            Get
                Return Me.columnLateralFactor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LateralGainColumn() As System.Data.DataColumn
            Get
                Return Me.columnLateralGain
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudinalFactorColumn() As System.Data.DataColumn
            Get
                Return Me.columnLongitudinalFactor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudinalGainColumn() As System.Data.DataColumn
            Get
                Return Me.columnLongitudinalGain
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SideColumn() As System.Data.DataColumn
            Get
                Return Me.columnSide
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CylinderLengthColumn() As System.Data.DataColumn
            Get
                Return Me.columnCylinderLength
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CyclicColumn() As System.Data.DataColumn
            Get
                Return Me.columnCyclic
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongitudinalLengthColumn() As System.Data.DataColumn
            Get
                Return Me.columnLongitudinalLength
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EncoderPositionColumn() As System.Data.DataColumn
            Get
                Return Me.columnEncoderPosition
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutputIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnOutputID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegistersRow
            Get
                Return CType(Me.Rows(index),RegistersRow)
            End Get
        End Property
        
        Public Event RegistersRowChanging As RegistersRowChangeEventHandler
        
        Public Event RegistersRowChanged As RegistersRowChangeEventHandler
        
        Public Event RegistersRowDeleting As RegistersRowChangeEventHandler
        
        Public Event RegistersRowDeleted As RegistersRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRegistersRow(ByVal row As RegistersRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRegistersRow( _
                    ByVal Range As Integer,  _
                    ByVal LongitudinalMode As Integer,  _
                    ByVal LateralMode As Integer,  _
                    ByVal IsBaseColor As Boolean,  _
                    ByVal IsInstalled As Boolean,  _
                    ByVal LateralRefValue As Double,  _
                    ByVal LateralValue As Double,  _
                    ByVal LongitudinalRefValue As Double,  _
                    ByVal LongitudinalValue As Double,  _
                    ByVal MarkID As Integer,  _
                    ByVal LateralFactor As Double,  _
                    ByVal LateralGain As Double,  _
                    ByVal LongitudinalFactor As Double,  _
                    ByVal LongitudinalGain As Double,  _
                    ByVal Side As Integer,  _
                    ByVal CylinderLength As Double,  _
                    ByVal Cyclic As Integer,  _
                    ByVal LongitudinalLength As Double,  _
                    ByVal EncoderPosition As Short,  _
                    ByVal OutputID As Short) As RegistersRow
            Dim rowRegistersRow As RegistersRow = CType(Me.NewRow,RegistersRow)
            rowRegistersRow.ItemArray = New Object() {Nothing, Range, LongitudinalMode, LateralMode, IsBaseColor, IsInstalled, LateralRefValue, LateralValue, LongitudinalRefValue, LongitudinalValue, MarkID, LateralFactor, LateralGain, LongitudinalFactor, LongitudinalGain, Side, CylinderLength, Cyclic, LongitudinalLength, EncoderPosition, OutputID}
            Me.Rows.Add(rowRegistersRow)
            Return rowRegistersRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRegisterID(ByVal RegisterID As Integer) As RegistersRow
            Return CType(Me.Rows.Find(New Object() {RegisterID}),RegistersRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As RegistersDataTable = CType(MyBase.Clone,RegistersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New RegistersDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRegisterID = MyBase.Columns("RegisterID")
            Me.columnRange = MyBase.Columns("Range")
            Me.columnLongitudinalMode = MyBase.Columns("LongitudinalMode")
            Me.columnLateralMode = MyBase.Columns("LateralMode")
            Me.columnIsBaseColor = MyBase.Columns("IsBaseColor")
            Me.columnIsInstalled = MyBase.Columns("IsInstalled")
            Me.columnLateralRefValue = MyBase.Columns("LateralRefValue")
            Me.columnLateralValue = MyBase.Columns("LateralValue")
            Me.columnLongitudinalRefValue = MyBase.Columns("LongitudinalRefValue")
            Me.columnLongitudinalValue = MyBase.Columns("LongitudinalValue")
            Me.columnMarkID = MyBase.Columns("MarkID")
            Me.columnLateralFactor = MyBase.Columns("LateralFactor")
            Me.columnLateralGain = MyBase.Columns("LateralGain")
            Me.columnLongitudinalFactor = MyBase.Columns("LongitudinalFactor")
            Me.columnLongitudinalGain = MyBase.Columns("LongitudinalGain")
            Me.columnSide = MyBase.Columns("Side")
            Me.columnCylinderLength = MyBase.Columns("CylinderLength")
            Me.columnCyclic = MyBase.Columns("Cyclic")
            Me.columnLongitudinalLength = MyBase.Columns("LongitudinalLength")
            Me.columnEncoderPosition = MyBase.Columns("EncoderPosition")
            Me.columnOutputID = MyBase.Columns("OutputID")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRegisterID = New System.Data.DataColumn("RegisterID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegisterID)
            Me.columnRange = New System.Data.DataColumn("Range", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRange)
            Me.columnLongitudinalMode = New System.Data.DataColumn("LongitudinalMode", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitudinalMode)
            Me.columnLateralMode = New System.Data.DataColumn("LateralMode", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLateralMode)
            Me.columnIsBaseColor = New System.Data.DataColumn("IsBaseColor", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsBaseColor)
            Me.columnIsInstalled = New System.Data.DataColumn("IsInstalled", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsInstalled)
            Me.columnLateralRefValue = New System.Data.DataColumn("LateralRefValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLateralRefValue)
            Me.columnLateralValue = New System.Data.DataColumn("LateralValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLateralValue)
            Me.columnLongitudinalRefValue = New System.Data.DataColumn("LongitudinalRefValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitudinalRefValue)
            Me.columnLongitudinalValue = New System.Data.DataColumn("LongitudinalValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitudinalValue)
            Me.columnMarkID = New System.Data.DataColumn("MarkID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkID)
            Me.columnLateralFactor = New System.Data.DataColumn("LateralFactor", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLateralFactor)
            Me.columnLateralGain = New System.Data.DataColumn("LateralGain", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLateralGain)
            Me.columnLongitudinalFactor = New System.Data.DataColumn("LongitudinalFactor", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitudinalFactor)
            Me.columnLongitudinalGain = New System.Data.DataColumn("LongitudinalGain", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitudinalGain)
            Me.columnSide = New System.Data.DataColumn("Side", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSide)
            Me.columnCylinderLength = New System.Data.DataColumn("CylinderLength", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCylinderLength)
            Me.columnCyclic = New System.Data.DataColumn("Cyclic", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCyclic)
            Me.columnLongitudinalLength = New System.Data.DataColumn("LongitudinalLength", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongitudinalLength)
            Me.columnEncoderPosition = New System.Data.DataColumn("EncoderPosition", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEncoderPosition)
            Me.columnOutputID = New System.Data.DataColumn("OutputID", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutputID)
            Me.Constraints.Add(New System.Data.UniqueConstraint("RegisterControlKey1", New System.Data.DataColumn() {Me.columnRegisterID}, true))
            Me.columnRegisterID.AutoIncrement = true
            Me.columnRegisterID.AllowDBNull = false
            Me.columnRegisterID.Unique = true
            Me.columnRange.DefaultValue = CType(100,Integer)
            Me.columnLongitudinalMode.DefaultValue = CType(1,Integer)
            Me.columnLateralMode.DefaultValue = CType(1,Integer)
            Me.columnIsBaseColor.DefaultValue = CType(false,Boolean)
            Me.columnIsInstalled.DefaultValue = CType(true,Boolean)
            Me.columnLateralRefValue.DefaultValue = CType(0,Double)
            Me.columnLateralValue.DefaultValue = CType(0,Double)
            Me.columnLongitudinalRefValue.DefaultValue = CType(0,Double)
            Me.columnLongitudinalValue.DefaultValue = CType(0,Double)
            Me.columnMarkID.DefaultValue = CType(0,Integer)
            Me.columnLateralFactor.DefaultValue = CType(1,Double)
            Me.columnLateralGain.DefaultValue = CType(1,Double)
            Me.columnLongitudinalFactor.DefaultValue = CType(1,Double)
            Me.columnLongitudinalGain.DefaultValue = CType(1,Double)
            Me.columnSide.DefaultValue = CType(0,Integer)
            Me.columnCylinderLength.DefaultValue = CType(504,Double)
            Me.columnCyclic.DefaultValue = CType(1,Integer)
            Me.columnEncoderPosition.DefaultValue = CType(-1,Short)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRegistersRow() As RegistersRow
            Return CType(Me.NewRow,RegistersRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New RegistersRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RegistersRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegistersRowChangedEvent) Is Nothing) Then
                RaiseEvent RegistersRowChanged(Me, New RegistersRowChangeEvent(CType(e.Row,RegistersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegistersRowChangingEvent) Is Nothing) Then
                RaiseEvent RegistersRowChanging(Me, New RegistersRowChangeEvent(CType(e.Row,RegistersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegistersRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegistersRowDeleted(Me, New RegistersRowChangeEvent(CType(e.Row,RegistersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegistersRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegistersRowDeleting(Me, New RegistersRowChangeEvent(CType(e.Row,RegistersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRegistersRow(ByVal row As RegistersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSJobs = New DSJobs
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegistersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GroupsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGroupID As System.Data.DataColumn
        
        Private columnJobID As System.Data.DataColumn
        
        Private columnGroupNumber As System.Data.DataColumn
        
        Private columnGroupColor As System.Data.DataColumn
        
        Private columnRegisterID As System.Data.DataColumn
        
        Private columnViscosityID As System.Data.DataColumn
        
        Private columnIsInstalled As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Groups"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnGroupID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnJobID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnGroupNumber
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupColorColumn() As System.Data.DataColumn
            Get
                Return Me.columnGroupColor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegisterIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnRegisterID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsInstalledColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsInstalled
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GroupsRow
            Get
                Return CType(Me.Rows(index),GroupsRow)
            End Get
        End Property
        
        Public Event GroupsRowChanging As GroupsRowChangeEventHandler
        
        Public Event GroupsRowChanged As GroupsRowChangeEventHandler
        
        Public Event GroupsRowDeleting As GroupsRowChangeEventHandler
        
        Public Event GroupsRowDeleted As GroupsRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGroupsRow(ByVal row As GroupsRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGroupsRow(ByVal parentJobsRowByJobs_Groups As JobsRow, ByVal GroupNumber As Integer, ByVal GroupColor As Integer, ByVal parentRegistersRowByRegister_Groups As RegistersRow, ByVal parentViscositiesRowByViscosityControl_Groups As ViscositiesRow, ByVal IsInstalled As Boolean) As GroupsRow
            Dim rowGroupsRow As GroupsRow = CType(Me.NewRow,GroupsRow)
            rowGroupsRow.ItemArray = New Object() {Nothing, parentJobsRowByJobs_Groups(0), GroupNumber, GroupColor, parentRegistersRowByRegister_Groups(0), parentViscositiesRowByViscosityControl_Groups(0), IsInstalled}
            Me.Rows.Add(rowGroupsRow)
            Return rowGroupsRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByGroupID(ByVal GroupID As Integer) As GroupsRow
            Return CType(Me.Rows.Find(New Object() {GroupID}),GroupsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As GroupsDataTable = CType(MyBase.Clone,GroupsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New GroupsDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGroupID = MyBase.Columns("GroupID")
            Me.columnJobID = MyBase.Columns("JobID")
            Me.columnGroupNumber = MyBase.Columns("GroupNumber")
            Me.columnGroupColor = MyBase.Columns("GroupColor")
            Me.columnRegisterID = MyBase.Columns("RegisterID")
            Me.columnViscosityID = MyBase.Columns("ViscosityID")
            Me.columnIsInstalled = MyBase.Columns("IsInstalled")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGroupID = New System.Data.DataColumn("GroupID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupID)
            Me.columnJobID = New System.Data.DataColumn("JobID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobID)
            Me.columnGroupNumber = New System.Data.DataColumn("GroupNumber", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupNumber)
            Me.columnGroupColor = New System.Data.DataColumn("GroupColor", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupColor)
            Me.columnRegisterID = New System.Data.DataColumn("RegisterID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegisterID)
            Me.columnViscosityID = New System.Data.DataColumn("ViscosityID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityID)
            Me.columnIsInstalled = New System.Data.DataColumn("IsInstalled", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsInstalled)
            Me.Constraints.Add(New System.Data.UniqueConstraint("GroupsKey1", New System.Data.DataColumn() {Me.columnGroupID}, true))
            Me.columnGroupID.AutoIncrement = true
            Me.columnGroupID.AllowDBNull = false
            Me.columnGroupID.Unique = true
            Me.columnJobID.AllowDBNull = false
            Me.columnGroupNumber.DefaultValue = CType(1,Integer)
            Me.columnGroupColor.DefaultValue = CType(0,Integer)
            Me.columnIsInstalled.DefaultValue = CType(true,Boolean)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGroupsRow() As GroupsRow
            Return CType(Me.NewRow,GroupsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New GroupsRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GroupsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GroupsRowChangedEvent) Is Nothing) Then
                RaiseEvent GroupsRowChanged(Me, New GroupsRowChangeEvent(CType(e.Row,GroupsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GroupsRowChangingEvent) Is Nothing) Then
                RaiseEvent GroupsRowChanging(Me, New GroupsRowChangeEvent(CType(e.Row,GroupsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GroupsRowDeletedEvent) Is Nothing) Then
                RaiseEvent GroupsRowDeleted(Me, New GroupsRowChangeEvent(CType(e.Row,GroupsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GroupsRowDeletingEvent) Is Nothing) Then
                RaiseEvent GroupsRowDeleting(Me, New GroupsRowChangeEvent(CType(e.Row,GroupsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGroupsRow(ByVal row As GroupsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSJobs = New DSJobs
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GroupsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ViscositiesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnViscosityID As System.Data.DataColumn
        
        Private columnViscosityRefValue As System.Data.DataColumn
        
        Private columnViscosityMax As System.Data.DataColumn
        
        Private columnViscosityMin As System.Data.DataColumn
        
        Private columnTemperatureRange As System.Data.DataColumn
        
        Private columnTemperatureMax As System.Data.DataColumn
        
        Private columnTemperatureMin As System.Data.DataColumn
        
        Private columnPhRefValue As System.Data.DataColumn
        
        Private columnPhMax As System.Data.DataColumn
        
        Private columnPhMin As System.Data.DataColumn
        
        Private columnViscosityGain As System.Data.DataColumn
        
        Private columnTemperatureGain As System.Data.DataColumn
        
        Private columnPhGain As System.Data.DataColumn
        
        Private columnViscosityMode As System.Data.DataColumn
        
        Private columnIsInstalled As System.Data.DataColumn
        
        Private columnViscosityRange As System.Data.DataColumn
        
        Private columnViscosityFactor As System.Data.DataColumn
        
        Private columnTemperatureFactor As System.Data.DataColumn
        
        Private columnPhFactor As System.Data.DataColumn
        
        Private columnViscosityValue As System.Data.DataColumn
        
        Private columnTemperatureValue As System.Data.DataColumn
        
        Private columnPhValue As System.Data.DataColumn
        
        Private columnFluid As System.Data.DataColumn
        
        Private columnPause As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Viscosities"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityRefValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityRefValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityMaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityMax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityMinColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityMin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemperatureRangeColumn() As System.Data.DataColumn
            Get
                Return Me.columnTemperatureRange
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemperatureMaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnTemperatureMax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemperatureMinColumn() As System.Data.DataColumn
            Get
                Return Me.columnTemperatureMin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhRefValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhRefValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhMaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhMax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhMinColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhMin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityGainColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityGain
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemperatureGainColumn() As System.Data.DataColumn
            Get
                Return Me.columnTemperatureGain
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhGainColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhGain
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityModeColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityMode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsInstalledColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsInstalled
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityRangeColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityRange
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityFactorColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityFactor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemperatureFactorColumn() As System.Data.DataColumn
            Get
                Return Me.columnTemperatureFactor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhFactorColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhFactor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ViscosityValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnViscosityValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TemperatureValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnTemperatureValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FluidColumn() As System.Data.DataColumn
            Get
                Return Me.columnFluid
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PauseColumn() As System.Data.DataColumn
            Get
                Return Me.columnPause
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ViscositiesRow
            Get
                Return CType(Me.Rows(index),ViscositiesRow)
            End Get
        End Property
        
        Public Event ViscositiesRowChanging As ViscositiesRowChangeEventHandler
        
        Public Event ViscositiesRowChanged As ViscositiesRowChangeEventHandler
        
        Public Event ViscositiesRowDeleting As ViscositiesRowChangeEventHandler
        
        Public Event ViscositiesRowDeleted As ViscositiesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddViscositiesRow(ByVal row As ViscositiesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddViscositiesRow( _
                    ByVal ViscosityRefValue As Double,  _
                    ByVal ViscosityMax As Double,  _
                    ByVal ViscosityMin As Double,  _
                    ByVal TemperatureRange As Double,  _
                    ByVal TemperatureMax As Double,  _
                    ByVal TemperatureMin As Double,  _
                    ByVal PhRefValue As Double,  _
                    ByVal PhMax As Double,  _
                    ByVal PhMin As Double,  _
                    ByVal ViscosityGain As Double,  _
                    ByVal TemperatureGain As Double,  _
                    ByVal PhGain As Double,  _
                    ByVal ViscosityMode As Integer,  _
                    ByVal IsInstalled As Boolean,  _
                    ByVal ViscosityRange As Double,  _
                    ByVal ViscosityFactor As Double,  _
                    ByVal TemperatureFactor As Double,  _
                    ByVal PhFactor As Double,  _
                    ByVal ViscosityValue As Double,  _
                    ByVal TemperatureValue As Double,  _
                    ByVal PhValue As Double,  _
                    ByVal Fluid As Integer,  _
                    ByVal Pause As Integer) As ViscositiesRow
            Dim rowViscositiesRow As ViscositiesRow = CType(Me.NewRow,ViscositiesRow)
            rowViscositiesRow.ItemArray = New Object() {Nothing, ViscosityRefValue, ViscosityMax, ViscosityMin, TemperatureRange, TemperatureMax, TemperatureMin, PhRefValue, PhMax, PhMin, ViscosityGain, TemperatureGain, PhGain, ViscosityMode, IsInstalled, ViscosityRange, ViscosityFactor, TemperatureFactor, PhFactor, ViscosityValue, TemperatureValue, PhValue, Fluid, Pause}
            Me.Rows.Add(rowViscositiesRow)
            Return rowViscositiesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByViscosityID(ByVal ViscosityID As Integer) As ViscositiesRow
            Return CType(Me.Rows.Find(New Object() {ViscosityID}),ViscositiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ViscositiesDataTable = CType(MyBase.Clone,ViscositiesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ViscositiesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnViscosityID = MyBase.Columns("ViscosityID")
            Me.columnViscosityRefValue = MyBase.Columns("ViscosityRefValue")
            Me.columnViscosityMax = MyBase.Columns("ViscosityMax")
            Me.columnViscosityMin = MyBase.Columns("ViscosityMin")
            Me.columnTemperatureRange = MyBase.Columns("TemperatureRange")
            Me.columnTemperatureMax = MyBase.Columns("TemperatureMax")
            Me.columnTemperatureMin = MyBase.Columns("TemperatureMin")
            Me.columnPhRefValue = MyBase.Columns("PhRefValue")
            Me.columnPhMax = MyBase.Columns("PhMax")
            Me.columnPhMin = MyBase.Columns("PhMin")
            Me.columnViscosityGain = MyBase.Columns("ViscosityGain")
            Me.columnTemperatureGain = MyBase.Columns("TemperatureGain")
            Me.columnPhGain = MyBase.Columns("PhGain")
            Me.columnViscosityMode = MyBase.Columns("ViscosityMode")
            Me.columnIsInstalled = MyBase.Columns("IsInstalled")
            Me.columnViscosityRange = MyBase.Columns("ViscosityRange")
            Me.columnViscosityFactor = MyBase.Columns("ViscosityFactor")
            Me.columnTemperatureFactor = MyBase.Columns("TemperatureFactor")
            Me.columnPhFactor = MyBase.Columns("PhFactor")
            Me.columnViscosityValue = MyBase.Columns("ViscosityValue")
            Me.columnTemperatureValue = MyBase.Columns("TemperatureValue")
            Me.columnPhValue = MyBase.Columns("PhValue")
            Me.columnFluid = MyBase.Columns("Fluid")
            Me.columnPause = MyBase.Columns("Pause")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnViscosityID = New System.Data.DataColumn("ViscosityID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityID)
            Me.columnViscosityRefValue = New System.Data.DataColumn("ViscosityRefValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityRefValue)
            Me.columnViscosityMax = New System.Data.DataColumn("ViscosityMax", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityMax)
            Me.columnViscosityMin = New System.Data.DataColumn("ViscosityMin", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityMin)
            Me.columnTemperatureRange = New System.Data.DataColumn("TemperatureRange", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemperatureRange)
            Me.columnTemperatureMax = New System.Data.DataColumn("TemperatureMax", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemperatureMax)
            Me.columnTemperatureMin = New System.Data.DataColumn("TemperatureMin", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemperatureMin)
            Me.columnPhRefValue = New System.Data.DataColumn("PhRefValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhRefValue)
            Me.columnPhMax = New System.Data.DataColumn("PhMax", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhMax)
            Me.columnPhMin = New System.Data.DataColumn("PhMin", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhMin)
            Me.columnViscosityGain = New System.Data.DataColumn("ViscosityGain", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityGain)
            Me.columnTemperatureGain = New System.Data.DataColumn("TemperatureGain", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemperatureGain)
            Me.columnPhGain = New System.Data.DataColumn("PhGain", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhGain)
            Me.columnViscosityMode = New System.Data.DataColumn("ViscosityMode", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityMode)
            Me.columnIsInstalled = New System.Data.DataColumn("IsInstalled", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsInstalled)
            Me.columnViscosityRange = New System.Data.DataColumn("ViscosityRange", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityRange)
            Me.columnViscosityFactor = New System.Data.DataColumn("ViscosityFactor", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityFactor)
            Me.columnTemperatureFactor = New System.Data.DataColumn("TemperatureFactor", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemperatureFactor)
            Me.columnPhFactor = New System.Data.DataColumn("PhFactor", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhFactor)
            Me.columnViscosityValue = New System.Data.DataColumn("ViscosityValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnViscosityValue)
            Me.columnTemperatureValue = New System.Data.DataColumn("TemperatureValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTemperatureValue)
            Me.columnPhValue = New System.Data.DataColumn("PhValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhValue)
            Me.columnFluid = New System.Data.DataColumn("Fluid", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFluid)
            Me.columnPause = New System.Data.DataColumn("Pause", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPause)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnViscosityID}, true))
            Me.columnViscosityID.AutoIncrement = true
            Me.columnViscosityID.AllowDBNull = false
            Me.columnViscosityID.Unique = true
            Me.columnViscosityRefValue.DefaultValue = CType(25,Double)
            Me.columnViscosityMax.DefaultValue = CType(40,Double)
            Me.columnViscosityMin.DefaultValue = CType(10,Double)
            Me.columnTemperatureRange.DefaultValue = CType(65,Double)
            Me.columnTemperatureMax.DefaultValue = CType(45,Double)
            Me.columnTemperatureMin.DefaultValue = CType(5,Double)
            Me.columnPhRefValue.DefaultValue = CType(7,Double)
            Me.columnPhMax.DefaultValue = CType(14,Double)
            Me.columnPhMin.DefaultValue = CType(0,Double)
            Me.columnViscosityGain.DefaultValue = CType(1,Double)
            Me.columnTemperatureGain.DefaultValue = CType(1,Double)
            Me.columnPhGain.DefaultValue = CType(1,Double)
            Me.columnViscosityMode.DefaultValue = CType(0,Integer)
            Me.columnIsInstalled.DefaultValue = CType(true,Boolean)
            Me.columnViscosityRange.DefaultValue = CType(40,Double)
            Me.columnViscosityFactor.DefaultValue = CType(1,Double)
            Me.columnTemperatureFactor.DefaultValue = CType(1,Double)
            Me.columnPhFactor.DefaultValue = CType(1,Double)
            Me.columnViscosityValue.DefaultValue = CType(20,Double)
            Me.columnTemperatureValue.DefaultValue = CType(12,Double)
            Me.columnPhValue.DefaultValue = CType(71,Double)
            Me.columnFluid.DefaultValue = CType(0,Integer)
            Me.columnPause.DefaultValue = CType(0,Integer)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewViscositiesRow() As ViscositiesRow
            Return CType(Me.NewRow,ViscositiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ViscositiesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ViscositiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ViscositiesRowChangedEvent) Is Nothing) Then
                RaiseEvent ViscositiesRowChanged(Me, New ViscositiesRowChangeEvent(CType(e.Row,ViscositiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ViscositiesRowChangingEvent) Is Nothing) Then
                RaiseEvent ViscositiesRowChanging(Me, New ViscositiesRowChangeEvent(CType(e.Row,ViscositiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ViscositiesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ViscositiesRowDeleted(Me, New ViscositiesRowChangeEvent(CType(e.Row,ViscositiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ViscositiesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ViscositiesRowDeleting(Me, New ViscositiesRowChangeEvent(CType(e.Row,ViscositiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveViscositiesRow(ByVal row As ViscositiesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSJobs = New DSJobs
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ViscositiesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DensitiesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDensityID As System.Data.DataColumn
        
        Private columnGroupID As System.Data.DataColumn
        
        Private columnIsInstalled As System.Data.DataColumn
        
        Private columnMarkPosition As System.Data.DataColumn
        
        Private columnDensityValue As System.Data.DataColumn
        
        Private columnDensityRefValue As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Densities"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DensityIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnDensityID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnGroupID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsInstalledColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsInstalled
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkPositionColumn() As System.Data.DataColumn
            Get
                Return Me.columnMarkPosition
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DensityValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnDensityValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DensityRefValueColumn() As System.Data.DataColumn
            Get
                Return Me.columnDensityRefValue
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DensitiesRow
            Get
                Return CType(Me.Rows(index),DensitiesRow)
            End Get
        End Property
        
        Public Event DensitiesRowChanging As DensitiesRowChangeEventHandler
        
        Public Event DensitiesRowChanged As DensitiesRowChangeEventHandler
        
        Public Event DensitiesRowDeleting As DensitiesRowChangeEventHandler
        
        Public Event DensitiesRowDeleted As DensitiesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDensitiesRow(ByVal row As DensitiesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDensitiesRow(ByVal DensityID As Integer, ByVal parentGroupsRowByFK_Groups_Densities As GroupsRow, ByVal IsInstalled As Boolean, ByVal MarkPosition As Short, ByVal DensityValue As Double, ByVal DensityRefValue As Double) As DensitiesRow
            Dim rowDensitiesRow As DensitiesRow = CType(Me.NewRow,DensitiesRow)
            rowDensitiesRow.ItemArray = New Object() {DensityID, parentGroupsRowByFK_Groups_Densities(0), IsInstalled, MarkPosition, DensityValue, DensityRefValue}
            Me.Rows.Add(rowDensitiesRow)
            Return rowDensitiesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDensityID(ByVal DensityID As Integer) As DensitiesRow
            Return CType(Me.Rows.Find(New Object() {DensityID}),DensitiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DensitiesDataTable = CType(MyBase.Clone,DensitiesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DensitiesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDensityID = MyBase.Columns("DensityID")
            Me.columnGroupID = MyBase.Columns("GroupID")
            Me.columnIsInstalled = MyBase.Columns("IsInstalled")
            Me.columnMarkPosition = MyBase.Columns("MarkPosition")
            Me.columnDensityValue = MyBase.Columns("DensityValue")
            Me.columnDensityRefValue = MyBase.Columns("DensityRefValue")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDensityID = New System.Data.DataColumn("DensityID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDensityID)
            Me.columnGroupID = New System.Data.DataColumn("GroupID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupID)
            Me.columnIsInstalled = New System.Data.DataColumn("IsInstalled", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsInstalled)
            Me.columnMarkPosition = New System.Data.DataColumn("MarkPosition", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkPosition)
            Me.columnDensityValue = New System.Data.DataColumn("DensityValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDensityValue)
            Me.columnDensityRefValue = New System.Data.DataColumn("DensityRefValue", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDensityRefValue)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnDensityID}, true))
            Me.columnDensityID.AllowDBNull = false
            Me.columnDensityID.Unique = true
            Me.columnDensityValue.AllowDBNull = false
            Me.columnDensityValue.DefaultValue = CType(0,Double)
            Me.columnDensityRefValue.AllowDBNull = false
            Me.columnDensityRefValue.DefaultValue = CType(50,Double)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDensitiesRow() As DensitiesRow
            Return CType(Me.NewRow,DensitiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DensitiesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DensitiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DensitiesRowChangedEvent) Is Nothing) Then
                RaiseEvent DensitiesRowChanged(Me, New DensitiesRowChangeEvent(CType(e.Row,DensitiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DensitiesRowChangingEvent) Is Nothing) Then
                RaiseEvent DensitiesRowChanging(Me, New DensitiesRowChangeEvent(CType(e.Row,DensitiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DensitiesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DensitiesRowDeleted(Me, New DensitiesRowChangeEvent(CType(e.Row,DensitiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DensitiesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DensitiesRowDeleting(Me, New DensitiesRowChangeEvent(CType(e.Row,DensitiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDensitiesRow(ByVal row As DensitiesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSJobs = New DSJobs
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DensitiesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZeloSystemDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSystemID As System.Data.DataColumn
        
        Private columnIO_ID As System.Data.DataColumn
        
        Private columnSerial_Number As System.Data.DataColumn
        
        Private columnSW_Version As System.Data.DataColumn
        
        Private columnHW_Version As System.Data.DataColumn
        
        Private columnInputID_0 As System.Data.DataColumn
        
        Private columnInputID_1 As System.Data.DataColumn
        
        Private columnInputID_2 As System.Data.DataColumn
        
        Private columnInputID_3 As System.Data.DataColumn
        
        Private columnInputID_4 As System.Data.DataColumn
        
        Private columnInputID_5 As System.Data.DataColumn
        
        Private columnInputID_6 As System.Data.DataColumn
        
        Private columnInputID_7 As System.Data.DataColumn
        
        Private columnOutputID_0 As System.Data.DataColumn
        
        Private columnOutputID_1 As System.Data.DataColumn
        
        Private columnOutputID_2 As System.Data.DataColumn
        
        Private columnOutputID_3 As System.Data.DataColumn
        
        Private columnOutputID_4 As System.Data.DataColumn
        
        Private columnOutputID_5 As System.Data.DataColumn
        
        Private columnOutputID_6 As System.Data.DataColumn
        
        Private columnOutputID_7 As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZeloSystem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SystemIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnSystemID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IO_IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnIO_ID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Serial_NumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnSerial_Number
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SW_VersionColumn() As System.Data.DataColumn
            Get
                Return Me.columnSW_Version
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HW_VersionColumn() As System.Data.DataColumn
            Get
                Return Me.columnHW_Version
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputID_0Column() As System.Data.DataColumn
            Get
                Return Me.columnInputID_0
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputID_1Column() As System.Data.DataColumn
            Get
                Return Me.columnInputID_1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputID_2Column() As System.Data.DataColumn
            Get
                Return Me.columnInputID_2
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputID_3Column() As System.Data.DataColumn
            Get
                Return Me.columnInputID_3
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputID_4Column() As System.Data.DataColumn
            Get
                Return Me.columnInputID_4
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputID_5Column() As System.Data.DataColumn
            Get
                Return Me.columnInputID_5
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputID_6Column() As System.Data.DataColumn
            Get
                Return Me.columnInputID_6
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputID_7Column() As System.Data.DataColumn
            Get
                Return Me.columnInputID_7
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutputID_0Column() As System.Data.DataColumn
            Get
                Return Me.columnOutputID_0
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutputID_1Column() As System.Data.DataColumn
            Get
                Return Me.columnOutputID_1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutputID_2Column() As System.Data.DataColumn
            Get
                Return Me.columnOutputID_2
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutputID_3Column() As System.Data.DataColumn
            Get
                Return Me.columnOutputID_3
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutputID_4Column() As System.Data.DataColumn
            Get
                Return Me.columnOutputID_4
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutputID_5Column() As System.Data.DataColumn
            Get
                Return Me.columnOutputID_5
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutputID_6Column() As System.Data.DataColumn
            Get
                Return Me.columnOutputID_6
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OutputID_7Column() As System.Data.DataColumn
            Get
                Return Me.columnOutputID_7
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZeloSystemRow
            Get
                Return CType(Me.Rows(index),ZeloSystemRow)
            End Get
        End Property
        
        Public Event ZeloSystemRowChanging As ZeloSystemRowChangeEventHandler
        
        Public Event ZeloSystemRowChanged As ZeloSystemRowChangeEventHandler
        
        Public Event ZeloSystemRowDeleting As ZeloSystemRowChangeEventHandler
        
        Public Event ZeloSystemRowDeleted As ZeloSystemRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddZeloSystemRow(ByVal row As ZeloSystemRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddZeloSystemRow( _
                    ByVal SystemID As Short,  _
                    ByVal parentInput_OutputsRowByFK_Input_Outputs_System As Input_OutputsRow,  _
                    ByVal Serial_Number As String,  _
                    ByVal SW_Version As String,  _
                    ByVal HW_Version As String,  _
                    ByVal InputID_0 As Short,  _
                    ByVal InputID_1 As Short,  _
                    ByVal InputID_2 As Short,  _
                    ByVal InputID_3 As Short,  _
                    ByVal InputID_4 As Short,  _
                    ByVal InputID_5 As Short,  _
                    ByVal InputID_6 As Short,  _
                    ByVal InputID_7 As Short,  _
                    ByVal OutputID_0 As Short,  _
                    ByVal OutputID_1 As Short,  _
                    ByVal OutputID_2 As Short,  _
                    ByVal OutputID_3 As Short,  _
                    ByVal OutputID_4 As Short,  _
                    ByVal OutputID_5 As Short,  _
                    ByVal OutputID_6 As Short,  _
                    ByVal OutputID_7 As Short) As ZeloSystemRow
            Dim rowZeloSystemRow As ZeloSystemRow = CType(Me.NewRow,ZeloSystemRow)
            rowZeloSystemRow.ItemArray = New Object() {SystemID, parentInput_OutputsRowByFK_Input_Outputs_System(0), Serial_Number, SW_Version, HW_Version, InputID_0, InputID_1, InputID_2, InputID_3, InputID_4, InputID_5, InputID_6, InputID_7, OutputID_0, OutputID_1, OutputID_2, OutputID_3, OutputID_4, OutputID_5, OutputID_6, OutputID_7}
            Me.Rows.Add(rowZeloSystemRow)
            Return rowZeloSystemRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySystemID(ByVal SystemID As Short) As ZeloSystemRow
            Return CType(Me.Rows.Find(New Object() {SystemID}),ZeloSystemRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ZeloSystemDataTable = CType(MyBase.Clone,ZeloSystemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ZeloSystemDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSystemID = MyBase.Columns("SystemID")
            Me.columnIO_ID = MyBase.Columns("IO_ID")
            Me.columnSerial_Number = MyBase.Columns("Serial_Number")
            Me.columnSW_Version = MyBase.Columns("SW_Version")
            Me.columnHW_Version = MyBase.Columns("HW_Version")
            Me.columnInputID_0 = MyBase.Columns("InputID_0")
            Me.columnInputID_1 = MyBase.Columns("InputID_1")
            Me.columnInputID_2 = MyBase.Columns("InputID_2")
            Me.columnInputID_3 = MyBase.Columns("InputID_3")
            Me.columnInputID_4 = MyBase.Columns("InputID_4")
            Me.columnInputID_5 = MyBase.Columns("InputID_5")
            Me.columnInputID_6 = MyBase.Columns("InputID_6")
            Me.columnInputID_7 = MyBase.Columns("InputID_7")
            Me.columnOutputID_0 = MyBase.Columns("OutputID_0")
            Me.columnOutputID_1 = MyBase.Columns("OutputID_1")
            Me.columnOutputID_2 = MyBase.Columns("OutputID_2")
            Me.columnOutputID_3 = MyBase.Columns("OutputID_3")
            Me.columnOutputID_4 = MyBase.Columns("OutputID_4")
            Me.columnOutputID_5 = MyBase.Columns("OutputID_5")
            Me.columnOutputID_6 = MyBase.Columns("OutputID_6")
            Me.columnOutputID_7 = MyBase.Columns("OutputID_7")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSystemID = New System.Data.DataColumn("SystemID", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSystemID)
            Me.columnIO_ID = New System.Data.DataColumn("IO_ID", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIO_ID)
            Me.columnSerial_Number = New System.Data.DataColumn("Serial_Number", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerial_Number)
            Me.columnSW_Version = New System.Data.DataColumn("SW_Version", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSW_Version)
            Me.columnHW_Version = New System.Data.DataColumn("HW_Version", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHW_Version)
            Me.columnInputID_0 = New System.Data.DataColumn("InputID_0", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputID_0)
            Me.columnInputID_1 = New System.Data.DataColumn("InputID_1", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputID_1)
            Me.columnInputID_2 = New System.Data.DataColumn("InputID_2", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputID_2)
            Me.columnInputID_3 = New System.Data.DataColumn("InputID_3", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputID_3)
            Me.columnInputID_4 = New System.Data.DataColumn("InputID_4", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputID_4)
            Me.columnInputID_5 = New System.Data.DataColumn("InputID_5", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputID_5)
            Me.columnInputID_6 = New System.Data.DataColumn("InputID_6", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputID_6)
            Me.columnInputID_7 = New System.Data.DataColumn("InputID_7", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputID_7)
            Me.columnOutputID_0 = New System.Data.DataColumn("OutputID_0", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutputID_0)
            Me.columnOutputID_1 = New System.Data.DataColumn("OutputID_1", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutputID_1)
            Me.columnOutputID_2 = New System.Data.DataColumn("OutputID_2", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutputID_2)
            Me.columnOutputID_3 = New System.Data.DataColumn("OutputID_3", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutputID_3)
            Me.columnOutputID_4 = New System.Data.DataColumn("OutputID_4", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutputID_4)
            Me.columnOutputID_5 = New System.Data.DataColumn("OutputID_5", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutputID_5)
            Me.columnOutputID_6 = New System.Data.DataColumn("OutputID_6", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutputID_6)
            Me.columnOutputID_7 = New System.Data.DataColumn("OutputID_7", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutputID_7)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSystemID}, true))
            Me.columnSystemID.AllowDBNull = false
            Me.columnSystemID.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewZeloSystemRow() As ZeloSystemRow
            Return CType(Me.NewRow,ZeloSystemRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ZeloSystemRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ZeloSystemRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZeloSystemRowChangedEvent) Is Nothing) Then
                RaiseEvent ZeloSystemRowChanged(Me, New ZeloSystemRowChangeEvent(CType(e.Row,ZeloSystemRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZeloSystemRowChangingEvent) Is Nothing) Then
                RaiseEvent ZeloSystemRowChanging(Me, New ZeloSystemRowChangeEvent(CType(e.Row,ZeloSystemRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZeloSystemRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZeloSystemRowDeleted(Me, New ZeloSystemRowChangeEvent(CType(e.Row,ZeloSystemRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZeloSystemRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZeloSystemRowDeleting(Me, New ZeloSystemRowChangeEvent(CType(e.Row,ZeloSystemRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveZeloSystemRow(ByVal row As ZeloSystemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSJobs = New DSJobs
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZeloSystemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Input_OutputsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIO_ID As System.Data.DataColumn
        
        Private columnIP As System.Data.DataColumn
        
        Private columnPort As System.Data.DataColumn
        
        Private columnClient_Server As System.Data.DataColumn
        
        Private columnDescription As System.Data.DataColumn
        
        Private columnPosition As System.Data.DataColumn
        
        Private columnKind As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Input_Outputs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IO_IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnIO_ID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IPColumn() As System.Data.DataColumn
            Get
                Return Me.columnIP
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PortColumn() As System.Data.DataColumn
            Get
                Return Me.columnPort
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Client_ServerColumn() As System.Data.DataColumn
            Get
                Return Me.columnClient_Server
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PositionColumn() As System.Data.DataColumn
            Get
                Return Me.columnPosition
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KindColumn() As System.Data.DataColumn
            Get
                Return Me.columnKind
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Input_OutputsRow
            Get
                Return CType(Me.Rows(index),Input_OutputsRow)
            End Get
        End Property
        
        Public Event Input_OutputsRowChanging As Input_OutputsRowChangeEventHandler
        
        Public Event Input_OutputsRowChanged As Input_OutputsRowChangeEventHandler
        
        Public Event Input_OutputsRowDeleting As Input_OutputsRowChangeEventHandler
        
        Public Event Input_OutputsRowDeleted As Input_OutputsRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddInput_OutputsRow(ByVal row As Input_OutputsRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddInput_OutputsRow(ByVal IP As String, ByVal Port As Short, ByVal Client_Server As Boolean, ByVal Description As String, ByVal Position As String, ByVal Kind As Short) As Input_OutputsRow
            Dim rowInput_OutputsRow As Input_OutputsRow = CType(Me.NewRow,Input_OutputsRow)
            rowInput_OutputsRow.ItemArray = New Object() {Nothing, IP, Port, Client_Server, Description, Position, Kind}
            Me.Rows.Add(rowInput_OutputsRow)
            Return rowInput_OutputsRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIO_ID(ByVal IO_ID As Short) As Input_OutputsRow
            Return CType(Me.Rows.Find(New Object() {IO_ID}),Input_OutputsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As Input_OutputsDataTable = CType(MyBase.Clone,Input_OutputsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New Input_OutputsDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIO_ID = MyBase.Columns("IO_ID")
            Me.columnIP = MyBase.Columns("IP")
            Me.columnPort = MyBase.Columns("Port")
            Me.columnClient_Server = MyBase.Columns("Client_Server")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnPosition = MyBase.Columns("Position")
            Me.columnKind = MyBase.Columns("Kind")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIO_ID = New System.Data.DataColumn("IO_ID", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIO_ID)
            Me.columnIP = New System.Data.DataColumn("IP", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIP)
            Me.columnPort = New System.Data.DataColumn("Port", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPort)
            Me.columnClient_Server = New System.Data.DataColumn("Client_Server", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient_Server)
            Me.columnDescription = New System.Data.DataColumn("Description", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnPosition = New System.Data.DataColumn("Position", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosition)
            Me.columnKind = New System.Data.DataColumn("Kind", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKind)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Input_OutputsKey1", New System.Data.DataColumn() {Me.columnIO_ID}, true))
            Me.columnIO_ID.AutoIncrement = true
            Me.columnIO_ID.AllowDBNull = false
            Me.columnIO_ID.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewInput_OutputsRow() As Input_OutputsRow
            Return CType(Me.NewRow,Input_OutputsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New Input_OutputsRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Input_OutputsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Input_OutputsRowChangedEvent) Is Nothing) Then
                RaiseEvent Input_OutputsRowChanged(Me, New Input_OutputsRowChangeEvent(CType(e.Row,Input_OutputsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Input_OutputsRowChangingEvent) Is Nothing) Then
                RaiseEvent Input_OutputsRowChanging(Me, New Input_OutputsRowChangeEvent(CType(e.Row,Input_OutputsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Input_OutputsRowDeletedEvent) Is Nothing) Then
                RaiseEvent Input_OutputsRowDeleted(Me, New Input_OutputsRowChangeEvent(CType(e.Row,Input_OutputsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Input_OutputsRowDeletingEvent) Is Nothing) Then
                RaiseEvent Input_OutputsRowDeleting(Me, New Input_OutputsRowChangeEvent(CType(e.Row,Input_OutputsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveInput_OutputsRow(ByVal row As Input_OutputsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSJobs = New DSJobs
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Input_OutputsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class JobsRow
        Inherits System.Data.DataRow
        
        Private tableJobs As JobsDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableJobs = CType(Me.Table,JobsDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobID() As Integer
            Get
                Return CType(Me(Me.tableJobs.JobIDColumn),Integer)
            End Get
            Set
                Me(Me.tableJobs.JobIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientName() As String
            Get
                Try 
                    Return CType(Me(Me.tableJobs.ClientNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ClientName' in table 'Jobs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJobs.ClientNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectName() As String
            Get
                Try 
                    Return CType(Me(Me.tableJobs.ProjectNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ProjectName' in table 'Jobs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJobs.ProjectNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Try 
                    Return CType(Me(Me.tableJobs.DateCreatedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DateCreated' in table 'Jobs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJobs.DateCreatedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateModified() As Date
            Get
                Try 
                    Return CType(Me(Me.tableJobs.DateModifiedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'DateModified' in table 'Jobs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJobs.DateModifiedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNameNull() As Boolean
            Return Me.IsNull(Me.tableJobs.ClientNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNameNull()
            Me(Me.tableJobs.ClientNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjectNameNull() As Boolean
            Return Me.IsNull(Me.tableJobs.ProjectNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjectNameNull()
            Me(Me.tableJobs.ProjectNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateCreatedNull() As Boolean
            Return Me.IsNull(Me.tableJobs.DateCreatedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateCreatedNull()
            Me(Me.tableJobs.DateCreatedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateModifiedNull() As Boolean
            Return Me.IsNull(Me.tableJobs.DateModifiedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateModifiedNull()
            Me(Me.tableJobs.DateModifiedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetGroupsRows() As GroupsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Jobs_Groups")),GroupsRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RegistersRow
        Inherits System.Data.DataRow
        
        Private tableRegisters As RegistersDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegisters = CType(Me.Table,RegistersDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegisterID() As Integer
            Get
                Return CType(Me(Me.tableRegisters.RegisterIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRegisters.RegisterIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Range() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.RangeColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Range' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.RangeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LongitudinalMode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LongitudinalModeColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LongitudinalMode' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LongitudinalModeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LateralMode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LateralModeColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LateralMode' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LateralModeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsBaseColor() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.IsBaseColorColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IsBaseColor' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.IsBaseColorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsInstalled() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.IsInstalledColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IsInstalled' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.IsInstalledColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LateralRefValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LateralRefValueColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LateralRefValue' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LateralRefValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LateralValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LateralValueColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LateralValue' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LateralValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LongitudinalRefValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LongitudinalRefValueColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LongitudinalRefValue' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LongitudinalRefValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LongitudinalValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LongitudinalValueColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LongitudinalValue' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LongitudinalValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.MarkIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MarkID' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.MarkIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LateralFactor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LateralFactorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LateralFactor' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LateralFactorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LateralGain() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LateralGainColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LateralGain' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LateralGainColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LongitudinalFactor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LongitudinalFactorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LongitudinalFactor' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LongitudinalFactorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LongitudinalGain() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LongitudinalGainColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LongitudinalGain' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LongitudinalGainColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Side() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.SideColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Side' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.SideColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CylinderLength() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.CylinderLengthColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'CylinderLength' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.CylinderLengthColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cyclic() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.CyclicColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Cyclic' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.CyclicColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LongitudinalLength() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.LongitudinalLengthColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LongitudinalLength' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.LongitudinalLengthColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EncoderPosition() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.EncoderPositionColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'EncoderPosition' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.EncoderPositionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutputID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRegisters.OutputIDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OutputID' in table 'Registers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegisters.OutputIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRangeNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.RangeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRangeNull()
            Me(Me.tableRegisters.RangeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudinalModeNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LongitudinalModeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudinalModeNull()
            Me(Me.tableRegisters.LongitudinalModeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLateralModeNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LateralModeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLateralModeNull()
            Me(Me.tableRegisters.LateralModeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsBaseColorNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.IsBaseColorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsBaseColorNull()
            Me(Me.tableRegisters.IsBaseColorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsInstalledNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.IsInstalledColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsInstalledNull()
            Me(Me.tableRegisters.IsInstalledColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLateralRefValueNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LateralRefValueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLateralRefValueNull()
            Me(Me.tableRegisters.LateralRefValueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLateralValueNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LateralValueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLateralValueNull()
            Me(Me.tableRegisters.LateralValueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudinalRefValueNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LongitudinalRefValueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudinalRefValueNull()
            Me(Me.tableRegisters.LongitudinalRefValueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudinalValueNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LongitudinalValueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudinalValueNull()
            Me(Me.tableRegisters.LongitudinalValueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarkIDNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.MarkIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarkIDNull()
            Me(Me.tableRegisters.MarkIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLateralFactorNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LateralFactorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLateralFactorNull()
            Me(Me.tableRegisters.LateralFactorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLateralGainNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LateralGainColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLateralGainNull()
            Me(Me.tableRegisters.LateralGainColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudinalFactorNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LongitudinalFactorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudinalFactorNull()
            Me(Me.tableRegisters.LongitudinalFactorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudinalGainNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LongitudinalGainColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudinalGainNull()
            Me(Me.tableRegisters.LongitudinalGainColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSideNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.SideColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSideNull()
            Me(Me.tableRegisters.SideColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCylinderLengthNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.CylinderLengthColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCylinderLengthNull()
            Me(Me.tableRegisters.CylinderLengthColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCyclicNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.CyclicColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCyclicNull()
            Me(Me.tableRegisters.CyclicColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongitudinalLengthNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.LongitudinalLengthColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongitudinalLengthNull()
            Me(Me.tableRegisters.LongitudinalLengthColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEncoderPositionNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.EncoderPositionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEncoderPositionNull()
            Me(Me.tableRegisters.EncoderPositionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOutputIDNull() As Boolean
            Return Me.IsNull(Me.tableRegisters.OutputIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOutputIDNull()
            Me(Me.tableRegisters.OutputIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetGroupsRows() As GroupsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Register_Groups")),GroupsRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GroupsRow
        Inherits System.Data.DataRow
        
        Private tableGroups As GroupsDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGroups = CType(Me.Table,GroupsDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupID() As Integer
            Get
                Return CType(Me(Me.tableGroups.GroupIDColumn),Integer)
            End Get
            Set
                Me(Me.tableGroups.GroupIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobID() As Integer
            Get
                Return CType(Me(Me.tableGroups.JobIDColumn),Integer)
            End Get
            Set
                Me(Me.tableGroups.JobIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupNumber() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGroups.GroupNumberColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GroupNumber' in table 'Groups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroups.GroupNumberColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupColor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGroups.GroupColorColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GroupColor' in table 'Groups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroups.GroupColorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegisterID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGroups.RegisterIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'RegisterID' in table 'Groups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroups.RegisterIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGroups.ViscosityIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ViscosityID' in table 'Groups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroups.ViscosityIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsInstalled() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGroups.IsInstalledColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IsInstalled' in table 'Groups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGroups.IsInstalledColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistersRow() As RegistersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Register_Groups")),RegistersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Register_Groups"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobsRow() As JobsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Jobs_Groups")),JobsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Jobs_Groups"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscositiesRow() As ViscositiesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ViscosityControl_Groups")),ViscositiesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ViscosityControl_Groups"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupNumberNull() As Boolean
            Return Me.IsNull(Me.tableGroups.GroupNumberColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupNumberNull()
            Me(Me.tableGroups.GroupNumberColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupColorNull() As Boolean
            Return Me.IsNull(Me.tableGroups.GroupColorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupColorNull()
            Me(Me.tableGroups.GroupColorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegisterIDNull() As Boolean
            Return Me.IsNull(Me.tableGroups.RegisterIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegisterIDNull()
            Me(Me.tableGroups.RegisterIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViscosityIDNull() As Boolean
            Return Me.IsNull(Me.tableGroups.ViscosityIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViscosityIDNull()
            Me(Me.tableGroups.ViscosityIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsInstalledNull() As Boolean
            Return Me.IsNull(Me.tableGroups.IsInstalledColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsInstalledNull()
            Me(Me.tableGroups.IsInstalledColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDensitiesRows() As DensitiesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Groups_Densities")),DensitiesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ViscositiesRow
        Inherits System.Data.DataRow
        
        Private tableViscosities As ViscositiesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableViscosities = CType(Me.Table,ViscositiesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityID() As Integer
            Get
                Return CType(Me(Me.tableViscosities.ViscosityIDColumn),Integer)
            End Get
            Set
                Me(Me.tableViscosities.ViscosityIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityRefValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.ViscosityRefValueColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ViscosityRefValue' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.ViscosityRefValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityMax() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.ViscosityMaxColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ViscosityMax' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.ViscosityMaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityMin() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.ViscosityMinColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ViscosityMin' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.ViscosityMinColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TemperatureRange() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.TemperatureRangeColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TemperatureRange' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.TemperatureRangeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TemperatureMax() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.TemperatureMaxColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TemperatureMax' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.TemperatureMaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TemperatureMin() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.TemperatureMinColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TemperatureMin' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.TemperatureMinColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhRefValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.PhRefValueColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PhRefValue' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.PhRefValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhMax() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.PhMaxColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PhMax' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.PhMaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhMin() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.PhMinColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PhMin' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.PhMinColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityGain() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.ViscosityGainColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ViscosityGain' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.ViscosityGainColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TemperatureGain() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.TemperatureGainColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TemperatureGain' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.TemperatureGainColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhGain() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.PhGainColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PhGain' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.PhGainColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityMode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.ViscosityModeColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ViscosityMode' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.ViscosityModeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsInstalled() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.IsInstalledColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IsInstalled' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.IsInstalledColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityRange() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.ViscosityRangeColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ViscosityRange' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.ViscosityRangeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityFactor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.ViscosityFactorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ViscosityFactor' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.ViscosityFactorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TemperatureFactor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.TemperatureFactorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TemperatureFactor' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.TemperatureFactorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhFactor() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.PhFactorColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PhFactor' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.PhFactorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ViscosityValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.ViscosityValueColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ViscosityValue' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.ViscosityValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TemperatureValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.TemperatureValueColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'TemperatureValue' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.TemperatureValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhValue() As Double
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.PhValueColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'PhValue' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.PhValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fluid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.FluidColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Fluid' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.FluidColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pause() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableViscosities.PauseColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Pause' in table 'Viscosities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableViscosities.PauseColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViscosityRefValueNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.ViscosityRefValueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViscosityRefValueNull()
            Me(Me.tableViscosities.ViscosityRefValueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViscosityMaxNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.ViscosityMaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViscosityMaxNull()
            Me(Me.tableViscosities.ViscosityMaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViscosityMinNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.ViscosityMinColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViscosityMinNull()
            Me(Me.tableViscosities.ViscosityMinColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemperatureRangeNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.TemperatureRangeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemperatureRangeNull()
            Me(Me.tableViscosities.TemperatureRangeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemperatureMaxNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.TemperatureMaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemperatureMaxNull()
            Me(Me.tableViscosities.TemperatureMaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemperatureMinNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.TemperatureMinColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemperatureMinNull()
            Me(Me.tableViscosities.TemperatureMinColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhRefValueNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.PhRefValueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhRefValueNull()
            Me(Me.tableViscosities.PhRefValueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhMaxNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.PhMaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhMaxNull()
            Me(Me.tableViscosities.PhMaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhMinNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.PhMinColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhMinNull()
            Me(Me.tableViscosities.PhMinColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViscosityGainNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.ViscosityGainColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViscosityGainNull()
            Me(Me.tableViscosities.ViscosityGainColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemperatureGainNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.TemperatureGainColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemperatureGainNull()
            Me(Me.tableViscosities.TemperatureGainColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhGainNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.PhGainColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhGainNull()
            Me(Me.tableViscosities.PhGainColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViscosityModeNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.ViscosityModeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViscosityModeNull()
            Me(Me.tableViscosities.ViscosityModeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsInstalledNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.IsInstalledColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsInstalledNull()
            Me(Me.tableViscosities.IsInstalledColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViscosityRangeNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.ViscosityRangeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViscosityRangeNull()
            Me(Me.tableViscosities.ViscosityRangeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViscosityFactorNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.ViscosityFactorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViscosityFactorNull()
            Me(Me.tableViscosities.ViscosityFactorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemperatureFactorNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.TemperatureFactorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemperatureFactorNull()
            Me(Me.tableViscosities.TemperatureFactorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhFactorNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.PhFactorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhFactorNull()
            Me(Me.tableViscosities.PhFactorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsViscosityValueNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.ViscosityValueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetViscosityValueNull()
            Me(Me.tableViscosities.ViscosityValueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTemperatureValueNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.TemperatureValueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTemperatureValueNull()
            Me(Me.tableViscosities.TemperatureValueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhValueNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.PhValueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhValueNull()
            Me(Me.tableViscosities.PhValueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFluidNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.FluidColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFluidNull()
            Me(Me.tableViscosities.FluidColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPauseNull() As Boolean
            Return Me.IsNull(Me.tableViscosities.PauseColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPauseNull()
            Me(Me.tableViscosities.PauseColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetGroupsRows() As GroupsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ViscosityControl_Groups")),GroupsRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DensitiesRow
        Inherits System.Data.DataRow
        
        Private tableDensities As DensitiesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDensities = CType(Me.Table,DensitiesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DensityID() As Integer
            Get
                Return CType(Me(Me.tableDensities.DensityIDColumn),Integer)
            End Get
            Set
                Me(Me.tableDensities.DensityIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDensities.GroupIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'GroupID' in table 'Densities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDensities.GroupIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsInstalled() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDensities.IsInstalledColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IsInstalled' in table 'Densities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDensities.IsInstalledColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkPosition() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDensities.MarkPositionColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'MarkPosition' in table 'Densities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDensities.MarkPositionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DensityValue() As Double
            Get
                Return CType(Me(Me.tableDensities.DensityValueColumn),Double)
            End Get
            Set
                Me(Me.tableDensities.DensityValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DensityRefValue() As Double
            Get
                Return CType(Me(Me.tableDensities.DensityRefValueColumn),Double)
            End Get
            Set
                Me(Me.tableDensities.DensityRefValueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupsRow() As GroupsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Groups_Densities")),GroupsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Groups_Densities"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupIDNull() As Boolean
            Return Me.IsNull(Me.tableDensities.GroupIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupIDNull()
            Me(Me.tableDensities.GroupIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsInstalledNull() As Boolean
            Return Me.IsNull(Me.tableDensities.IsInstalledColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsInstalledNull()
            Me(Me.tableDensities.IsInstalledColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarkPositionNull() As Boolean
            Return Me.IsNull(Me.tableDensities.MarkPositionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarkPositionNull()
            Me(Me.tableDensities.MarkPositionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ZeloSystemRow
        Inherits System.Data.DataRow
        
        Private tableZeloSystem As ZeloSystemDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZeloSystem = CType(Me.Table,ZeloSystemDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SystemID() As Short
            Get
                Return CType(Me(Me.tableZeloSystem.SystemIDColumn),Short)
            End Get
            Set
                Me(Me.tableZeloSystem.SystemIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IO_ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.IO_IDColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IO_ID' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.IO_IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Serial_Number() As String
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.Serial_NumberColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Serial_Number' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.Serial_NumberColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SW_Version() As String
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.SW_VersionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SW_Version' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.SW_VersionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HW_Version() As String
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.HW_VersionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'HW_Version' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.HW_VersionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputID_0() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.InputID_0Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'InputID_0' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.InputID_0Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputID_1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.InputID_1Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'InputID_1' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.InputID_1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputID_2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.InputID_2Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'InputID_2' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.InputID_2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputID_3() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.InputID_3Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'InputID_3' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.InputID_3Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputID_4() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.InputID_4Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'InputID_4' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.InputID_4Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputID_5() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.InputID_5Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'InputID_5' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.InputID_5Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputID_6() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.InputID_6Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'InputID_6' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.InputID_6Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputID_7() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.InputID_7Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'InputID_7' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.InputID_7Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutputID_0() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.OutputID_0Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OutputID_0' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.OutputID_0Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutputID_1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.OutputID_1Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OutputID_1' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.OutputID_1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutputID_2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.OutputID_2Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OutputID_2' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.OutputID_2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutputID_3() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.OutputID_3Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OutputID_3' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.OutputID_3Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutputID_4() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.OutputID_4Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OutputID_4' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.OutputID_4Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutputID_5() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.OutputID_5Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OutputID_5' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.OutputID_5Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutputID_6() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.OutputID_6Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OutputID_6' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.OutputID_6Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OutputID_7() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZeloSystem.OutputID_7Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OutputID_7' in table 'ZeloSystem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZeloSystem.OutputID_7Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Input_OutputsRow() As Input_OutputsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Input_Outputs_System")),Input_OutputsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Input_Outputs_System"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIO_IDNull() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.IO_IDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIO_IDNull()
            Me(Me.tableZeloSystem.IO_IDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerial_NumberNull() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.Serial_NumberColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerial_NumberNull()
            Me(Me.tableZeloSystem.Serial_NumberColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSW_VersionNull() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.SW_VersionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSW_VersionNull()
            Me(Me.tableZeloSystem.SW_VersionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHW_VersionNull() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.HW_VersionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHW_VersionNull()
            Me(Me.tableZeloSystem.HW_VersionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputID_0Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.InputID_0Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputID_0Null()
            Me(Me.tableZeloSystem.InputID_0Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputID_1Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.InputID_1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputID_1Null()
            Me(Me.tableZeloSystem.InputID_1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputID_2Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.InputID_2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputID_2Null()
            Me(Me.tableZeloSystem.InputID_2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputID_3Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.InputID_3Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputID_3Null()
            Me(Me.tableZeloSystem.InputID_3Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputID_4Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.InputID_4Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputID_4Null()
            Me(Me.tableZeloSystem.InputID_4Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputID_5Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.InputID_5Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputID_5Null()
            Me(Me.tableZeloSystem.InputID_5Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputID_6Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.InputID_6Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputID_6Null()
            Me(Me.tableZeloSystem.InputID_6Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputID_7Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.InputID_7Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputID_7Null()
            Me(Me.tableZeloSystem.InputID_7Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOutputID_0Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.OutputID_0Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOutputID_0Null()
            Me(Me.tableZeloSystem.OutputID_0Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOutputID_1Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.OutputID_1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOutputID_1Null()
            Me(Me.tableZeloSystem.OutputID_1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOutputID_2Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.OutputID_2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOutputID_2Null()
            Me(Me.tableZeloSystem.OutputID_2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOutputID_3Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.OutputID_3Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOutputID_3Null()
            Me(Me.tableZeloSystem.OutputID_3Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOutputID_4Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.OutputID_4Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOutputID_4Null()
            Me(Me.tableZeloSystem.OutputID_4Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOutputID_5Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.OutputID_5Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOutputID_5Null()
            Me(Me.tableZeloSystem.OutputID_5Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOutputID_6Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.OutputID_6Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOutputID_6Null()
            Me(Me.tableZeloSystem.OutputID_6Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOutputID_7Null() As Boolean
            Return Me.IsNull(Me.tableZeloSystem.OutputID_7Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOutputID_7Null()
            Me(Me.tableZeloSystem.OutputID_7Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Input_OutputsRow
        Inherits System.Data.DataRow
        
        Private tableInput_Outputs As Input_OutputsDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableInput_Outputs = CType(Me.Table,Input_OutputsDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IO_ID() As Short
            Get
                Return CType(Me(Me.tableInput_Outputs.IO_IDColumn),Short)
            End Get
            Set
                Me(Me.tableInput_Outputs.IO_IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IP() As String
            Get
                Try 
                    Return CType(Me(Me.tableInput_Outputs.IPColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IP' in table 'Input_Outputs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInput_Outputs.IPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Port() As Short
            Get
                Try 
                    Return CType(Me(Me.tableInput_Outputs.PortColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Port' in table 'Input_Outputs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInput_Outputs.PortColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client_Server() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableInput_Outputs.Client_ServerColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Client_Server' in table 'Input_Outputs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInput_Outputs.Client_ServerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableInput_Outputs.DescriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Description' in table 'Input_Outputs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInput_Outputs.DescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Position() As String
            Get
                Try 
                    Return CType(Me(Me.tableInput_Outputs.PositionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Position' in table 'Input_Outputs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInput_Outputs.PositionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kind() As Short
            Get
                Try 
                    Return CType(Me(Me.tableInput_Outputs.KindColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Kind' in table 'Input_Outputs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInput_Outputs.KindColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIPNull() As Boolean
            Return Me.IsNull(Me.tableInput_Outputs.IPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIPNull()
            Me(Me.tableInput_Outputs.IPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPortNull() As Boolean
            Return Me.IsNull(Me.tableInput_Outputs.PortColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPortNull()
            Me(Me.tableInput_Outputs.PortColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClient_ServerNull() As Boolean
            Return Me.IsNull(Me.tableInput_Outputs.Client_ServerColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClient_ServerNull()
            Me(Me.tableInput_Outputs.Client_ServerColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableInput_Outputs.DescriptionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableInput_Outputs.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPositionNull() As Boolean
            Return Me.IsNull(Me.tableInput_Outputs.PositionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPositionNull()
            Me(Me.tableInput_Outputs.PositionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKindNull() As Boolean
            Return Me.IsNull(Me.tableInput_Outputs.KindColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKindNull()
            Me(Me.tableInput_Outputs.KindColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSystemRows() As ZeloSystemRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Input_Outputs_System")),ZeloSystemRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class JobsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As JobsRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As JobsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As JobsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RegistersRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As RegistersRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RegistersRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RegistersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GroupsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As GroupsRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GroupsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GroupsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ViscositiesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ViscositiesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ViscositiesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ViscositiesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DensitiesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DensitiesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DensitiesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DensitiesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ZeloSystemRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ZeloSystemRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ZeloSystemRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ZeloSystemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Input_OutputsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As Input_OutputsRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Input_OutputsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Input_OutputsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
